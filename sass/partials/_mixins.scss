//  =====================
//  = Fluid grid Mixins =
//  =====================


// Responsive grid
// 1. cols : number of grid columns
// 2. mode : gutters, gutterleft, samegutter

@mixin fluid-grid($cols, $mode:'gutters') {
	float: left;
	@include box-sizing(border-box);

	$target : $cols * $column-width-px + ($cols - 1) * $gutter-width-px;
	width : percentage( $target / $site-width-px );

	// cols have semi gutter on left and right (ex: col=54 & gut=13 + 13)
	// use when container is transparent
	@if $mode == 'gutters' {
		margin-right : $gutter-width / 2;
		margin-left : $gutter-width / 2;
	}

	// the 13 gutters have same size (ex : col=54 & gut=24)
	// use when container is displayed
	@if $mode == 'same-gutter' {
		margin-left : $gutter-width;
	}

	// each col has a left gutter, except for the first one (ex: col=58 & gut=24)
	// prefer the gutters method
	@if $mode == 'gutter-left' {
		margin-left : $gutter-width;

		&:first-child {
			margin-left:0;
		}
	}
}


//  ========================
//  = Standard Grid Mixins =
//  ========================

// Standard grid
// 1. cols : number of grid columns
// 2. mode : gutters, gutterleft, samegutter

@mixin grid($cols, $mode:'gutters') {
	float: left;
	@include box-sizing(border-box);

	width : $cols * $column-width-px + ($cols - 1) * $gutter-width-px;

	// cols have semi gutter on left and right (ex: col=54 & gut=13 + 13)
	// use when container is transparent
	@if $mode == 'gutters' {
		margin-right : $gutter-width-px / 2;
		margin-left : $gutter-width-px / 2;
	}

	// the 13 gutters have same size (ex : col=54 & gut=24)
	// use when container is displayed
	@if $mode == 'same-gutter' {
		margin-left : $gutter-width-px;
	}

	// each col has a left gutter, except for the first one (ex: col=58 & gut=24)
	// prefer the gutters method
	@if $mode == 'gutter-left' {
		margin-left : $gutter-width-px;

		&:first-child {
			margin-left:0;
		}
	}
}


// In addition to mixin grid
// add a clearfix and no margin for the first element of each line
// 1. cols : number of grid columns

@mixin gallery($cols) {

	$nb: $columns / $cols;

	&:nth-child(#{$nb}n+1) {
		clear:both;
		margin-left:0;
	}
}


//  ========================
//  = Media Queries Mixins =
//  ========================

@mixin desktop($breakpoint: 1024px) {

  @media screen and (min-width: $breakpoint) {
    @content;
  }

}

@mixin tablet($breakpoint: 800px) {

  @media screen and (min-width: $breakpoint) {
    @content;
  }

}

@mixin only-tablet($breakpoint1: 800px, $breakpoint2: 481px) {

  @media screen and (max-width: $breakpoint1) and (min-width: $breakpoint1) {
    @content;
  }

}


@mixin smartphone($breakpoint: 480px) {

  @media screen and (min-width: $breakpoint) {
    @content;
  }

}

@mixin retina() {

  @media (min--moz-device-pixel-ratio: 1.5),
         (-o-min-device-pixel-ratio: 3/2),
         (-webkit-min-device-pixel-ratio: 1.5),
         (min-device-pixel-ratio: 1.5),
         (min-resolution: 144dpi),
         (min-resolution: 1.5dppx)
  {
    @content;

  }
}

//  ==========
//  = Mixins =
//  ==========

// disable fields highlight

@mixin noselect() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Animations

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }

  @-moz-keyframes $animation-name {
    @content;
  }

  @-ms-keyframes $animation-name{
    @content;
  }

  @keyframes $animation-name {
    @content;
  }
}

@mixin no-animation{
  @include experimental(animation, none, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-name($animation-name){
  @include experimental(animation-name, $animation-name, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-iteration-count($iteration-count){
    @include experimental(animation-iteration-count, $iteration-count, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-timing-function($timing-function){
    @include experimental(animation-timing-function, $timing-function, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-duration($duration){
    @include experimental(animation-duration, $duration, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-delay($delay){
    @include experimental(animation-delay, $delay, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin animation-fill-mode($fill-mode){
    @include experimental(animation-fill-mode, $fill-mode, -moz, -webkit, -o, -ms, not -khtml, official);
}


// Placeholder styling

@mixin input-placeholder {
  @if $experimental-support-for-webkit {
    &::-webkit-input-placeholder {
      @content;
    }
  }
  @if $experimental-support-for-mozilla {
    &:-moz-placeholder {
      @content;
    }
    &::-moz-placeholder {
      @content;
    }
  }
  @if $experimental-support-for-microsoft {
    &:-ms-input-placeholder {
      @content;
    }
  }
}
